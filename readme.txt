Ответы на вопросы

1. Работа с историей изменений. Написать команды:

1. которая выводит сообщения и автора всех коммитов из ветки develop-feature1, которые сделаны за последние 3 часа и которых нет в родительских ветках (develop, master). Сортировка по дате, первые более новые.

Решение: git log --pretty=format:"%cn commited with message: %B" --since="3 hours ago" --date-order develop-feature1 --not develop-feature1^

2. выводит для каждого коммита из веток master, develop, в сообщении которых есть упоминание заданного номера задачи (допустим задачи 231), его сообщение, автора и дату. Сортировка по дате, первые более новые.

Решение: git log --pretty=format:"%cd %cn commited with message: %B" --date-order --branches=master,develop | grep 001

2. “Избирательное слияние”. 
Дано: После слияния ветки develop-feature1 в develop, вы продолжили работать в ветке develop-feature1, а develop отдали на тестирование, потом исправили ошибку и закоммитили исправление в develop-feature1, сделали push. Через какое-то время тим лид говорит, что это критический фикс, и надо включить его в develop. Вы делаете pull в ветке develop-feature1 и оказывается, что ваш коллега сделал еще 3 коммита после вашего, и они не стабильные, поэтому не должны быть включены в develop. 
Задание: как добавить в develop только ваш коммит, но чтобы 3 коммита после него в develop не попали?

Решение:
Перейти в ветку develop командой git checkout develop. 
Применить команду git cherry-pick [SHA], где  [SHA] — это хэш вашего коммита, который должен попасть в develop, его можно посмотреть в логах отфильтровав по последнему коммиту от вашего имени (git log --date-order develop | grep osovskaya). 
 

3. “Исправление ошибок”.
Дано: Вы начали работу над новой фичей и создали от develop дочернюю ветку develop-feature3.
Сделали там несколько коммитов, и синхронизировались с сервером - все ваши изменения теперь в develop-feature3 на сервере. И тут вы вспомнили, что тим лид строго настрого сказал, что сообщение каждого коммита должно быть форматировано определенным образом (см. примечание п.0) и обязательно содержать номер задачи. А вы об этом забыли и теперь на сервере лежит ветка develop-feature1с “плохими” сообщениями. Задание: Предложите вариант, как наиболее просто исправить ситуацию, чтобы тим лид не увидел ваш промах.

Решение:
Можно использовать команду git rebase -i HEAD~n, где n — количество коммитов, которые необходимо исправить, считая от последнего. Т.е. n = 3 это последние три.
В открывшемся редакторе выбрать коммиты с неправильными сообщениями, вместо pick указать reword (использовать коммит, но редактировать сообщение), сохранить и закрыть файл. В открывшихся файлах исправить сообщения для каждого выбранного коммита, сохранить, закрыть файл. 
Синхронизировать изменения с сервером командой git push —force.
